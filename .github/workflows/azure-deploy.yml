name: Azure Deployment Pipeline

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

permissions:
  contents: read
  security-events: write
  id-token: write

env:
  AZURE_RG: clauseforge-prod
  AZURE_LOCATION: eastus2
  ACR_NAME: clauseforgeacr
  ACA_APP: clauseforge-api
  BACKEND_IMAGE_NAME: clauseforge-api
  FRONTEND_IMAGE_NAME: clauseforge-frontend

jobs:
  backend-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: lexiscan_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports: ["5432:5432"]
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports: ["6379:6379"]
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install system deps (psycopg build)
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev build-essential
      - name: Install
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      - name: Wait for services
        run: sleep 10
      - name: Tests
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/lexiscan_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key
          ENVIRONMENT: test
          PYTHONPATH: .
        run: |
          export PYTHONPATH=$PWD:$PYTHONPATH
          pytest -v
      - name: Upload coverage to Codecov (optional)
        uses: codecov/codecov-action@v3
        continue-on-error: true
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install
        run: npm ci
      - name: Lint
        run: npm run lint --if-present
      - name: Type check
        run: npm run type-check
      - name: Upload coverage to Codecov (optional)
        uses: codecov/codecov-action@v3
        continue-on-error: true
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Trivy
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: fs
          scan-ref: .
          format: sarif
          output: trivy-results.sarif
      - name: Upload SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-results.sarif

  build-and-push:
    needs: [backend-test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: ACR login
        run: az acr login --name ${{ env.ACR_NAME }}
      - name: Build & push backend (ACR Tasks)
        run: |
          az acr build --registry ${{ env.ACR_NAME }} \
            --image ${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }} \
            --image ${{ env.BACKEND_IMAGE_NAME }}:latest ./backend

  deploy-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Update Container App image + env
        run: |
          az containerapp update \
            -g ${{ env.AZURE_RG }} -n ${{ env.ACA_APP }} \
            --image ${{ env.ACR_NAME }}.azurecr.io/${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }} \
            --set-env-vars \
              DATABASE_URL=secretref:database-url \
              AZURE_STORAGE_CONN=secretref:storage-conn \
              STRIPE_SECRET_KEY=secretref:stripe-secret-key \
              CLAUDE_API_KEY=secretref:claude-api-key \
              CORS_ALLOWED_ORIGINS=https://orange-ocean-083504e0f.3.azurestaticapps.net/ \
              ENVIRONMENT=production \
              PORT=8000
      - name: Show deployment info
        run: |
          echo "Active revision:"
          az containerapp revision list -g ${{ env.AZURE_RG }} -n ${{ env.ACA_APP }} --query "[?properties.active==\`true\`].name" -o tsv
          echo "FQDN:"
          az containerapp show -g ${{ env.AZURE_RG }} -n ${{ env.ACA_APP }} --query "properties.configuration.ingress.fqdn" -o tsv
      - name: Wait & smoke tests
        run: |
          sleep 120
          FQDN=$(az containerapp show -g ${{ env.AZURE_RG }} -n ${{ env.ACA_APP }} --query properties.configuration.ingress.fqdn -o tsv)
          curl -f "https://$FQDN/api/health" || exit 1
          curl -f "https://$FQDN/api/health/detailed" || exit 1

  deploy-frontend:
    needs: [frontend-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Debug SWA token length (no value printed)
        run: |
          printf %s "${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}" | wc -c

      - name: Debug SWA token trailing-bytes (should end with 0a only)
        run: |
          printf %s "${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}" | tail -c 8 | od -An -t x1

      - name: Build and Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          action: upload
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          app_location: frontend
          output_location: out
          is_static_export: true
          app_build_command: npm ci && npm run build:static
          skip_api_build: true
          deployment_environment: production
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.PROD_API_URL }}

      - name: Azure Login for verification
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Verify Static Web App deployment
        run: |
          echo "Static Web App details:"
          az staticwebapp show -g clauseforge-prod -n clauseforge-frontend --query "{name:name, host:defaultHostname, id:id, region:location, repo:repositoryUrl}"
          echo ""
          echo "All Static Web Apps in subscription:"
          az staticwebapp list --query "[].{name:name, host:defaultHostname, rg:resourceGroup}" -o table
