name: Azure Deployment Pipeline

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main, develop]

env:
  AZURE_RG: clauseforge
  AZURE_LOCATION: eastus2
  ACR_NAME: clauseforgeacr
  ACA_ENV: clauseforge-env
  ACA_APP: clauseforge-api
  BACKEND_IMAGE_NAME: clauseforge-api
  FRONTEND_IMAGE_NAME: clauseforge-frontend

jobs:
  # Backend Tests
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: lexiscan_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run linting
        working-directory: ./backend
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Run type checking
        working-directory: ./backend
        run: mypy . --ignore-missing-imports
      
      - name: Run tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/lexiscan_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key
          ENVIRONMENT: test
        run: |
          pytest --cov=. --cov-report=xml --cov-report=html
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  # Frontend Tests
  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run linting
        working-directory: ./frontend
        run: npm run lint
      
      - name: Run type checking
        working-directory: ./frontend
        run: npm run type-check
      
      - name: Run tests
        working-directory: ./frontend
        run: npm run test -- --coverage --watchAll=false
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and Push to Azure Container Registry
  build-and-push:
    needs: [backend-test, frontend-test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    outputs:
      backend-image-tag: ${{ steps.backend-meta.outputs.tags }}
      frontend-image-tag: ${{ steps.frontend-meta.outputs.tags }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Azure Container Registry
        run: az acr login --name ${{ env.ACR_NAME }}
      
      - name: Extract backend metadata
        id: backend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.ACR_NAME }}.azurecr.io/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push backend image using ACR Tasks
        run: |
          az acr build \
            --registry ${{ env.ACR_NAME }} \
            --image ${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }} \
            --image ${{ env.BACKEND_IMAGE_NAME }}:latest \
            ./backend
      
      - name: Extract frontend metadata
        id: frontend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.ACR_NAME }}.azurecr.io/${{ env.FRONTEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push frontend image using ACR Tasks
        run: |
          az acr build \
            --registry ${{ env.ACR_NAME }} \
            --image ${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }} \
            --image ${{ env.FRONTEND_IMAGE_NAME }}:latest \
            ./frontend

  # Deploy to Azure Container Apps (Staging)
  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Update Container App with new image
        run: |
          az containerapp update \
            -g ${{ env.AZURE_RG }} -n ${{ env.ACA_APP }}-staging \
            --image ${{ env.ACR_NAME }}.azurecr.io/${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }} \
            --set-env-vars \
            CLAUDE_API_KEY=secretref:claude-api-key \
            STRIPE_SECRET_KEY=secretref:stripe-secret-key \
            DATABASE_URL=secretref:database-url \
            REDIS_URL=secretref:redis-url \
            AZURE_STORAGE_CONNECTION_STRING=secretref:storage-connection \
            JWT_SECRET=secretref:jwt-secret \
            AZURE_DOC_INTEL_ENDPOINT=secretref:doc-intel-endpoint \
            AZURE_DOC_INTEL_KEY=secretref:doc-intel-key \
            ENVIRONMENT=staging \
            PORT=8000
      
      - name: Wait for deployment
        run: sleep 60
      
      - name: Get Container App URL
        id: get-url
        run: |
          FQDN=$(az containerapp show -g ${{ env.AZURE_RG }} -n ${{ env.ACA_APP }}-staging --query properties.configuration.ingress.fqdn -o tsv)
          echo "app_url=https://$FQDN" >> $GITHUB_OUTPUT
      
      - name: Run smoke tests
        run: |
          # Basic health checks
          curl -f "${{ steps.get-url.outputs.app_url }}/api/health" || exit 1
          curl -f "${{ steps.get-url.outputs.app_url }}/api/health/detailed" || exit 1
          
          echo "âœ… Staging deployment successful: ${{ steps.get-url.outputs.app_url }}"

  # Deploy to Azure Container Apps (Production)
  deploy-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Update Container App with new image
        run: |
          az containerapp update \
            -g ${{ env.AZURE_RG }} -n ${{ env.ACA_APP }} \
            --image ${{ env.ACR_NAME }}.azurecr.io/${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }} \
            --set-env-vars \
            CLAUDE_API_KEY=secretref:claude-api-key \
            STRIPE_SECRET_KEY=secretref:stripe-secret-key \
            DATABASE_URL=secretref:database-url \
            REDIS_URL=secretref:redis-url \
            AZURE_STORAGE_CONNECTION_STRING=secretref:storage-connection \
            JWT_SECRET=secretref:jwt-secret \
            AZURE_DOC_INTEL_ENDPOINT=secretref:doc-intel-endpoint \
            AZURE_DOC_INTEL_KEY=secretref:doc-intel-key \
            ENVIRONMENT=production \
            PORT=8000
      
      - name: Wait for deployment
        run: sleep 120
      
      - name: Get Container App URL
        id: get-url
        run: |
          FQDN=$(az containerapp show -g ${{ env.AZURE_RG }} -n ${{ env.ACA_APP }} --query properties.configuration.ingress.fqdn -o tsv)
          echo "app_url=https://$FQDN" >> $GITHUB_OUTPUT
      
      - name: Run production smoke tests
        run: |
          # Comprehensive health checks
          curl -f "${{ steps.get-url.outputs.app_url }}/api/health" || exit 1
          curl -f "${{ steps.get-url.outputs.app_url }}/api/health/detailed" || exit 1
          
          # Test key endpoints
          curl -f "${{ steps.get-url.outputs.app_url }}/api/auth/health" || echo "Auth endpoint check failed"
          
          echo "âœ… Production deployment successful: ${{ steps.get-url.outputs.app_url }}"
      
      - name: Notify deployment success
        if: success()
        run: |
          echo "ðŸš€ Production deployment successful!"
          echo "Application URL: ${{ steps.get-url.outputs.app_url }}"
          
          # Create GitHub release if this is a tag push
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            echo "Creating GitHub release for $TAG_NAME"
            
            # Generate release notes
            RELEASE_NOTES="Release $TAG_NAME deployed to Azure Container Apps"
            
            # Create GitHub release
            gh release create "$TAG_NAME" \
              --title "Release $TAG_NAME" \
              --notes "$RELEASE_NOTES" \
              --latest
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Rollback on failure
  rollback-production:
    needs: deploy-production
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Rollback Container App
        run: |
          # Get the previous revision
          PREVIOUS_REVISION=$(az containerapp revision list \
            -g ${{ env.AZURE_RG }} -n ${{ env.ACA_APP }} \
            --query "[?properties.active==\`false\`] | [0].name" -o tsv)
          
          if [ -n "$PREVIOUS_REVISION" ]; then
            echo "Rolling back to revision: $PREVIOUS_REVISION"
            az containerapp revision activate \
              -g ${{ env.AZURE_RG }} -n ${{ env.ACA_APP }} \
              --revision $PREVIOUS_REVISION
          else
            echo "No previous revision found for rollback"
          fi
          
          echo "ðŸ”„ Rollback initiated for production service"

  # Deploy Frontend to Azure Static Web Apps
  deploy-frontend:
    needs: [frontend-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set environment variables
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
            echo "API_URL=${{ secrets.PROD_API_URL }}" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
            echo "API_URL=${{ secrets.STAGING_API_URL }}" >> $GITHUB_ENV
          fi
      
      - name: Build and Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/frontend"
          api_location: ""
          output_location: "out"
        env:
          NEXT_PUBLIC_API_URL: ${{ env.API_URL }}
          NEXT_PUBLIC_APP_URL: ${{ secrets.APP_URL }}

  # Create Release (on tag push)
  create-release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [deploy-production]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Extract version from tag
        id: version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#v}
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag_name }}
          name: Release ${{ steps.version.outputs.tag_name }}
          body: |
            ## ClauseForge Release ${{ steps.version.outputs.tag_name }}
            
            ### ðŸš€ Deployed to Azure
            - **Backend**: Azure Container Apps
            - **Frontend**: Azure Static Web Apps
            - **Database**: Azure PostgreSQL Flexible Server
            - **Storage**: Azure Blob Storage
            
            ### ðŸ“‹ Changes
            See commit history for detailed changes.
            
            ### ðŸ”— Links
            - [Production App](https://clauseforge.azurestaticapps.net)
            - [API Documentation](https://clauseforge-api.azurecontainerapps.io/docs)
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}