version: '3.8'

services:
  # PostgreSQL with pgvector
  postgres:
    image: pgvector/pgvector:pg15
    container_name: lexiscan-staging-postgres
    environment:
      POSTGRES_DB: lexiscan_staging
      POSTGRES_USER: lexiscan
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-staging_password}
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lexiscan -d lexiscan_staging"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lexiscan-staging

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: lexiscan-staging-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-staging_redis_password}
    volumes:
      - redis_staging_data:/data
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - lexiscan-staging

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: lexiscan-staging-backend
    environment:
      # Database
      DATABASE_URL: postgresql://lexiscan:${POSTGRES_PASSWORD:-staging_password}@postgres:5432/lexiscan_staging
      REDIS_URL: redis://:${REDIS_PASSWORD:-staging_redis_password}@redis:6379/0
      
      # Application
      ENVIRONMENT: staging
      DEBUG: "false"
      LOG_LEVEL: INFO
      SECRET_KEY: ${SECRET_KEY:-staging_secret_key_change_in_production}
      JWT_SECRET: ${JWT_SECRET:-staging_jwt_secret_change_in_production}
      
      # AI Services
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      EMBEDDING_PROVIDER: ${EMBEDDING_PROVIDER:-openai}
      LLM_PROVIDER: ${LLM_PROVIDER:-anthropic}
      
      # AWS Services (LocalStack for staging)
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      AWS_ENDPOINT_URL: http://localstack:4566
      S3_BUCKET_NAME: lexiscan-documents-staging
      SQS_QUEUE_URL: http://localstack:4566/000000000000/lexiscan-processing-staging
      
      # Stripe (test keys)
      STRIPE_SECRET_KEY: ${STRIPE_TEST_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_TEST_WEBHOOK_SECRET}
      
      # Feature Flags
      FEATURE_FLAGS_ENABLED: "true"
      
      # Monitoring
      ENABLE_METRICS: "true"
      ENABLE_TRACING: "true"
      OTEL_SERVICE_NAME: lexiscan-backend-staging
      OTEL_ENVIRONMENT: staging
    ports:
      - "8001:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      localstack:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - ./backend/logs:/app/logs
    networks:
      - lexiscan-staging

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        NEXT_PUBLIC_API_URL: http://localhost:8001
        NEXT_PUBLIC_APP_URL: http://localhost:3001
        NEXT_PUBLIC_ENVIRONMENT: staging
    container_name: lexiscan-staging-frontend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:8001
      NEXT_PUBLIC_APP_URL: http://localhost:3001
      NEXT_PUBLIC_ENVIRONMENT: staging
      NEXTAUTH_URL: http://localhost:3001
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-staging_nextauth_secret}
    ports:
      - "3001:3000"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - lexiscan-staging

  # LocalStack for AWS services simulation
  localstack:
    image: localstack/localstack:3.0
    container_name: lexiscan-staging-localstack
    environment:
      SERVICES: s3,sqs,secretsmanager,lambda
      DEBUG: 0
      DATA_DIR: /tmp/localstack/data
      DOCKER_HOST: unix:///var/run/docker.sock
      HOST_TMP_FOLDER: /tmp/localstack
    ports:
      - "4567:4566"
    volumes:
      - localstack_staging_data:/tmp/localstack
      - /var/run/docker.sock:/var/run/docker.sock
      - ./scripts/localstack-init.sh:/etc/localstack/init/ready.d/init-aws.sh
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lexiscan-staging

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: lexiscan-staging-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/staging.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - lexiscan-staging

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: lexiscan-staging-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus-staging.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_staging_data:/prometheus
    networks:
      - lexiscan-staging

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: lexiscan-staging-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-staging_admin}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    ports:
      - "3001:3000"
    volumes:
      - grafana_staging_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - lexiscan-staging

volumes:
  postgres_staging_data:
    driver: local
  redis_staging_data:
    driver: local
  localstack_staging_data:
    driver: local
  prometheus_staging_data:
    driver: local
  grafana_staging_data:
    driver: local

networks:
  lexiscan-staging:
    driver: bridge
    name: lexiscan-staging-network